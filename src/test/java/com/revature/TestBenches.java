package com.revature;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import org.junit.*;

import com.revature.database.DAOs;
import com.revature.models.dao.BankAccount;
import com.revature.models.dao.Customer;
import com.revature.models.dao.User;

public class TestBenches {

    private DAOs daos;
    @Before
    public void setUpDAO() {
    	daos= new DAOs();
    }
    

    @Test                                               
    public void testBankAccountGen() {
    	//this is a bunch of auto-generated functions it should work
    	//all the models should work
    	BankAccount bankAccount= new BankAccount(7, 3, "hello", 36, 1736, false);
    	assertEquals(7,bankAccount.getPrimaryKey());
    	assertEquals(3, bankAccount.getOwnerUserId());
    	assertEquals("hello", bankAccount.getAccountName());
    	assertEquals(36, bankAccount.getAccountTypeId());
    	assertEquals(1736, bankAccount.getAccountBalance());
    	assertEquals(false, bankAccount.isActivated());
    	bankAccount.setActivated();
    	assertEquals(true, bankAccount.isActivated());
    	
    }
    @Test
    public void testUserGen() {
    	//this is a bunch of auto-generated functions if it works
    	//all the models should work since they are autogenerated using the same system
    	User u = new User(7, "goodbye", "hello", 36, 1736, 1);
    	assertEquals(7,u.getPrimaryKey());
    	assertEquals("goodbye", u.getUsername());
    	assertEquals("hello", u.getUserPassword());
    	assertEquals(36, u.getEmployeeId());
    	assertEquals(1736, u.getCustomerId());
    	assertEquals(1, u.getMainAccountId());
    	u.setMainAccountId(3);
    	assertEquals(3, u.getMainAccountId());
    	
    }
    @Test
    public void notNullWhen1() {
    	
    	assertNotNull(daos.accountTypes.getById(1));
    	assertNotNull(daos.users.getById(1));

    	assertNotNull(daos.bankAccounts.getById(1));
    	assertNotNull(daos.customers.getById(1));
    	assertNotNull(daos.employees.getById(1));
    	assertNotNull(daos.transactions.getById(1));
    }
    @Test
    public void isNullWhenZero() {
    	
    	assertNull(daos.accountTypes.getById(0));
    	assertNull(daos.users.getById(0));

    	assertNull(daos.bankAccounts.getById(0));
    	assertNull(daos.customers.getById(0));
    	assertNull(daos.employees.getById(0));
    	assertNull(daos.transactions.getById(0));
    }
    @Test
    public void onAddUpdatesId() {
    	Customer c= new Customer(0,"TEST");
    	//customer and employee data is the only datatype that has no references and is repeatable
    	
    	daos.customers.add(c);
    	assertNotEquals(0, c.getPrimaryKey());
    }
    
    
    
    //What else am I really going to test using JUnit;
    
    //the database layer talks to an external SQL server I cannot Mock
    //the presentation layer's responses are based entirely off of user input
    //the application layer doesn't really give feedback as it has the job of controlling the program flow which makes it the top level entity.
    // who is the application layer supposed to be giving responses to? other parts of the application layer?
    //Is it just me or is this design pattern designed not to cooperate with JUnit?
}